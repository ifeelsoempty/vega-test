{"version":3,"file":"static/js/885.b8e2e3bb.chunk.js","mappings":"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","sources":["api/mocks/handlers.ts","api/mocks/browser.ts"],"sourcesContent":["import { HttpResponse, http } from 'msw'\r\n\r\nimport { Asset, AssetName, Portfolio, Position, Price, Response } from '../types'\r\nimport { ASSETS, ASSET_NAMES, HISTORICAL_PRICES, LAST_AVAILABLE_DATE, PORTFOLIO_BASE } from './data'\r\n\r\nconst delay = (delayInms: number) => {\r\n  return new Promise(resolve => setTimeout(resolve, delayInms));\r\n};\r\n\r\nconst shortenNumber = (price: number) => Number((price).toFixed(4))\r\n\r\nconst getPriceByAsset = (currentAsset: AssetName, asOf: string): Price | undefined => {\r\n  const id = ASSETS.find((asset) => asset.name === currentAsset)?.id;\r\n\r\n  if(!id) return\r\n\r\n  if (HISTORICAL_PRICES[currentAsset]) {\r\n    let closestDate = '';\r\n\r\n    for (const date of Object.keys(HISTORICAL_PRICES[currentAsset])) {\r\n      if (date <= asOf && (!closestDate || date > closestDate)) {\r\n        closestDate = date;\r\n      }\r\n    }\r\n\r\n    if (closestDate) {\r\n      return {\r\n        id,\r\n        asset: currentAsset,\r\n        price: shortenNumber(HISTORICAL_PRICES[currentAsset][closestDate]),\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nfunction getPriceList(requestedAssets: AssetName[], asOf: string): Price[] {\r\n  const result: Price[] = [];\r\n\r\n  for (const currentAsset of requestedAssets) {\r\n    const price = getPriceByAsset(currentAsset, asOf);\r\n\r\n    price && result.push(price);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport const handlers = [\r\n  http.get<never, never, Response<Portfolio>>('/portfolios', async ({ request }) => {\r\n    const searchParams = new URL(request.url).searchParams\r\n    const asOf = searchParams.get('asOf') ?? LAST_AVAILABLE_DATE;\r\n\r\n    const positions: Position[] = [];\r\n    \r\n    PORTFOLIO_BASE.positions.forEach((position) => {\r\n      const asset = ASSETS.find((asset) => asset.name === position.assetName)?.id;\r\n      const price = getPriceByAsset(position.assetName, asOf)?.price;\r\n\r\n      if(!asset || !price) return\r\n\r\n      positions.push(\r\n        {\r\n          id: position.id,\r\n          asset,\r\n          quantity: shortenNumber(position.quantity),\r\n          asOf,\r\n          price: shortenNumber(price * position.quantity),\r\n        }\r\n      )\r\n    })\r\n\r\n    const response: Response<Portfolio> = {\r\n      description: 'successful operation',\r\n      content: {\r\n        id: PORTFOLIO_BASE.id,\r\n        asOf,\r\n        positions: positions.sort((a, b) => a.price + b.price),\r\n      }\r\n    };\r\n    \r\n    // Imitate loading\r\n    await delay(250);\r\n\r\n    return HttpResponse.json(response) \r\n  }),\r\n  http.get<never, never, Response<Price[]>>('/prices', async ({ request }) => {\r\n    const searchParams = new URL(request.url).searchParams\r\n\r\n    const asOfParam = searchParams.get('asOf'); \r\n    const assetsParam = searchParams.get('assets')?.split(',');\r\n\r\n    const asOf = asOfParam ?? LAST_AVAILABLE_DATE;\r\n    const assets = assetsParam?.filter((asset) => {\r\n      return ASSET_NAMES.includes(asset as AssetName)\r\n    }) as AssetName[] ?? ASSET_NAMES;\r\n\r\n    const response = {\r\n      description: 'successful operation',\r\n      content: getPriceList(assets, asOf)\r\n    }\r\n    await delay(250);\r\n\r\n    return HttpResponse.json(response)\r\n  }),\r\n  http.get<never, never, Response<Asset[]>>('/assets', ({ request }) => {\r\n    const response = {\r\n      description: 'successful operation',\r\n      content: ASSETS\r\n    };\r\n\r\n    return HttpResponse.json(response)\r\n  }),\r\n]\r\n","import { setupWorker } from 'msw/browser'\r\nimport { handlers } from './handlers'\r\n\r\nexport const worker = setupWorker(...handlers)"],"names":["delay","delayInms","Promise","resolve","setTimeout","shortenNumber","price","Number","toFixed","getPriceByAsset","currentAsset","asOf","_ASSETS$find","id","ASSETS","find","asset","name","HISTORICAL_PRICES","closestDate","date","Object","keys","getPriceList","requestedAssets","result","push","handlers","http","get","async","_searchParams$get","request","_ref","URL","url","searchParams","LAST_AVAILABLE_DATE","positions","PORTFOLIO_BASE","forEach","position","_ASSETS$find2","_getPriceByAsset","assetName","quantity","response","description","content","sort","a","b","HttpResponse","json","_searchParams$get2","_ref3","_ref2","asOfParam","assetsParam","split","filter","ASSET_NAMES","includes","_ref4","worker","setupWorker"],"sourceRoot":""}